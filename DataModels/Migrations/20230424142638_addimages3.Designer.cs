// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace DataModels.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230424142638_addimages3")]
    partial class addimages3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.AuthorizationTb", b =>
                {
                    b.Property<int>("auth_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("auth_id"));

                    b.Property<DateTime>("auth_end_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("auth_notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("auth_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("auth_start_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("auth_type_id")
                        .HasColumnType("int");

                    b.Property<int>("rent_id")
                        .HasColumnType("int");

                    b.HasKey("auth_id");

                    b.HasIndex("auth_type_id");

                    b.HasIndex("rent_id");

                    b.ToTable("AuthorizationTbs");
                });

            modelBuilder.Entity("WebApplication1.Models.AuthorizationType", b =>
                {
                    b.Property<int>("auth_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("auth_type_id"));

                    b.Property<string>("auth_type_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("auth_type_id");

                    b.ToTable("AuthorizationTypes");
                });

            modelBuilder.Entity("WebApplication1.Models.CarLoc", b =>
                {
                    b.Property<int>("carLoc_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carLoc_id"));

                    b.Property<string>("carLoc_Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("carLoc_id");

                    b.ToTable("CarLocs");
                });

            modelBuilder.Entity("WebApplication1.Models.CarModel", b =>
                {
                    b.Property<int>("carmod_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("carmod_id"));

                    b.Property<string>("carmod_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("carmod_id");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("WebApplication1.Models.CarStatus", b =>
                {
                    b.Property<int>("status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("status_id"));

                    b.Property<string>("status_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("status_id");

                    b.ToTable("CarStatuses");
                });

            modelBuilder.Entity("WebApplication1.Models.CarType", b =>
                {
                    b.Property<int>("cartype_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cartype_id"));

                    b.Property<int?>("carmod_id")
                        .HasColumnType("int");

                    b.Property<string>("cartype_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cartype_id");

                    b.HasIndex("carmod_id");

                    b.ToTable("CarTypes");
                });

            modelBuilder.Entity("WebApplication1.Models.Carr", b =>
                {
                    b.Property<int>("car_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("car_id"));

                    b.Property<double?>("Free_Hour")
                        .HasColumnType("float");

                    b.Property<double?>("Km_price")
                        .HasColumnType("float");

                    b.Property<string>("Plate_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("accident_fees")
                        .HasColumnType("float");

                    b.Property<int?>("carLoc_id")
                        .HasColumnType("int");

                    b.Property<double?>("car_km")
                        .HasColumnType("float");

                    b.Property<int>("car_year")
                        .HasColumnType("int");

                    b.Property<int>("carmod_id")
                        .HasColumnType("int");

                    b.Property<int>("cartype_id")
                        .HasColumnType("int");

                    b.Property<int?>("clor_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<double>("day_price")
                        .HasColumnType("float");

                    b.Property<double?>("free_km")
                        .HasColumnType("float");

                    b.Property<int?>("fueltype_id")
                        .HasColumnType("int");

                    b.Property<double?>("hour_price")
                        .HasColumnType("float");

                    b.Property<string>("insurance_company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("insurance_num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("insurane_exp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("last_update")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("lice_exp")
                        .HasColumnType("datetime2");

                    b.Property<string>("lice_num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("month_price")
                        .HasColumnType("float");

                    b.Property<int?>("row_status")
                        .HasColumnType("int");

                    b.Property<int>("status_id")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.Property<double>("week_price")
                        .HasColumnType("float");

                    b.HasKey("car_id");

                    b.HasIndex("carLoc_id");

                    b.HasIndex("carmod_id");

                    b.HasIndex("cartype_id");

                    b.HasIndex("clor_id");

                    b.HasIndex("fueltype_id");

                    b.HasIndex("status_id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("WebApplication1.Models.Clor", b =>
                {
                    b.Property<int>("clor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("clor_id"));

                    b.Property<string>("clor_val")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("clor_id");

                    b.ToTable("Clors");
                });

            modelBuilder.Entity("WebApplication1.Models.ContractStatus", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractId");

                    b.ToTable("ContractStatuses");
                });

            modelBuilder.Entity("WebApplication1.Models.ContractType", b =>
                {
                    b.Property<int>("contract_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("contract_type_id"));

                    b.Property<string>("contract_type_val")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("days_count")
                        .HasColumnType("int");

                    b.HasKey("contract_type_id");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("WebApplication1.Models.CustomerStatus", b =>
                {
                    b.Property<int>("cust_st_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cust_st_id"));

                    b.Property<string>("cust_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cust_st_id");

                    b.ToTable("CustomerStatuses");
                });

            modelBuilder.Entity("WebApplication1.Models.Customerr", b =>
                {
                    b.Property<int>("Cust_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Cust_id"));

                    b.Property<string>("Cust_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("birth_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("comp_addr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("company_vat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cust_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cust_id_copy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cust_num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("cust_num_expire")
                        .HasColumnType("datetime2");

                    b.Property<int>("cust_st_id")
                        .HasColumnType("int");

                    b.Property<string>("home_addr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lice_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("lice_exp")
                        .HasColumnType("datetime2");

                    b.Property<string>("lice_num")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("nat_id")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Cust_id");

                    b.HasIndex("cust_st_id");

                    b.HasIndex("nat_id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebApplication1.Models.Employee", b =>
                {
                    b.Property<int>("EmpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpID"));

                    b.Property<int>("Projectproj_id")
                        .HasColumnType("int");

                    b.Property<string>("emp_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmpID");

                    b.HasIndex("Projectproj_id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WebApplication1.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.Property<int>("invoice_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("invoice_id"));

                    b.Property<string>("auth_notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cust_id")
                        .HasColumnType("int");

                    b.Property<double>("invoice_amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("invoice_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("invoice_desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("invoice_item")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("invoice_total")
                        .HasColumnType("float");

                    b.Property<double>("invoice_vat")
                        .HasColumnType("float");

                    b.Property<int>("pay_id")
                        .HasColumnType("int");

                    b.Property<int>("rent_id")
                        .HasColumnType("int");

                    b.HasKey("invoice_id");

                    b.HasIndex("cust_id");

                    b.HasIndex("rent_id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("WebApplication1.Models.Kmcounter", b =>
                {
                    b.Property<int>("kmcounter_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("kmcounter_id"));

                    b.Property<int>("KmEnum")
                        .HasColumnType("int");

                    b.Property<int>("car_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("counter_date")
                        .HasColumnType("datetime2");

                    b.Property<double>("counter_km")
                        .HasColumnType("float");

                    b.Property<string>("counter_notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("kmcounter_id");

                    b.HasIndex("car_id");

                    b.ToTable("Kmcounters");
                });

            modelBuilder.Entity("WebApplication1.Models.Nationality", b =>
                {
                    b.Property<int>("nat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("nat_id"));

                    b.Property<string>("nat_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("nat_id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("WebApplication1.Models.Oil", b =>
                {
                    b.Property<int>("oil_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("oil_id"));

                    b.Property<int>("car_id")
                        .HasColumnType("int");

                    b.Property<double>("oil_amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("oil_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("oil_distance")
                        .HasColumnType("int");

                    b.Property<int>("oil_km")
                        .HasColumnType("int");

                    b.Property<int>("oil_next")
                        .HasColumnType("int");

                    b.Property<string>("oil_notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("oil_total")
                        .HasColumnType("float");

                    b.Property<string>("oil_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("oil_vat")
                        .HasColumnType("float");

                    b.Property<string>("oil_workshop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("oil_id");

                    b.HasIndex("car_id");

                    b.ToTable("Oils");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.Property<int>("pay_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pay_id"));

                    b.Property<double>("pay_amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("pay_created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("pay_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("pay_desc_id")
                        .HasColumnType("int");

                    b.Property<int>("pay_method_id")
                        .HasColumnType("int");

                    b.Property<string>("pay_notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pay_type_id")
                        .HasColumnType("int");

                    b.Property<int>("rent_id")
                        .HasColumnType("int");

                    b.Property<double?>("user_id")
                        .HasColumnType("float");

                    b.HasKey("pay_id");

                    b.HasIndex("pay_desc_id");

                    b.HasIndex("pay_method_id");

                    b.HasIndex("pay_type_id");

                    b.HasIndex("rent_id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WebApplication1.Models.PaymentDescription", b =>
                {
                    b.Property<int>("pay_desc_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pay_desc_id"));

                    b.Property<string>("pay_desc_receive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pay_desc_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pay_descriptione")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pay_type_message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pay_desc_id");

                    b.ToTable("PaymentDescriptions");
                });

            modelBuilder.Entity("WebApplication1.Models.PaymentOptions", b =>
                {
                    b.Property<int>("pay_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pay_id"));

                    b.Property<string>("pay_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pay_id");

                    b.ToTable("paymentOptions");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment_Type", b =>
                {
                    b.Property<int>("pay_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("pay_type_id"));

                    b.Property<string>("pay_type_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pay_type_id");

                    b.ToTable("payment_Types");
                });

            modelBuilder.Entity("WebApplication1.Models.Project", b =>
                {
                    b.Property<int>("proj_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("proj_id"));

                    b.Property<string>("proj_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("proj_id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WebApplication1.Models.Rent", b =>
                {
                    b.Property<int>("rentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rentId"));

                    b.Property<double?>("Accident_Price")
                        .HasColumnType("float");

                    b.Property<double?>("BackFuel")
                        .HasColumnType("float");

                    b.Property<double?>("ChargeFees")
                        .HasColumnType("float");

                    b.Property<int?>("ContractStatusId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<double?>("Escape_Price")
                        .HasColumnType("float");

                    b.Property<double?>("Fixed_Body_Price")
                        .HasColumnType("float");

                    b.Property<double?>("LeaveFuel")
                        .HasColumnType("float");

                    b.Property<DateTime>("PrePaidInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("PrePaidInvoicePrice")
                        .HasColumnType("float");

                    b.Property<double?>("Theft_Price")
                        .HasColumnType("float");

                    b.Property<string>("acciedent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("advanced_pay")
                        .HasColumnType("float");

                    b.Property<int>("carID")
                        .HasColumnType("int");

                    b.Property<string>("car_city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("contract_type_id")
                        .HasColumnType("int");

                    b.Property<double>("current_km")
                        .HasColumnType("float");

                    b.Property<int>("cust_id")
                        .HasColumnType("int");

                    b.Property<double?>("discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("end_km")
                        .HasColumnType("float");

                    b.Property<int>("extra_days")
                        .HasColumnType("int");

                    b.Property<int>("extra_days_fees")
                        .HasColumnType("int");

                    b.Property<string>("extra_driver_mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra_driver_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("extra_hour")
                        .HasColumnType("float");

                    b.Property<double?>("extra_hour_fees")
                        .HasColumnType("float");

                    b.Property<string>("extra_iqama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("extra_iqama_expire")
                        .HasColumnType("datetime2");

                    b.Property<double>("extra_km")
                        .HasColumnType("float");

                    b.Property<double>("extra_km_fees")
                        .HasColumnType("float");

                    b.Property<DateTime?>("extra_licence_expire")
                        .HasColumnType("datetime2");

                    b.Property<double>("free")
                        .HasColumnType("float");

                    b.Property<double?>("free_km_total")
                        .HasColumnType("float");

                    b.Property<double?>("net_amount")
                        .HasColumnType("float");

                    b.Property<string>("notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("open_km")
                        .HasColumnType("float");

                    b.Property<string>("others")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("others_Price")
                        .HasColumnType("float");

                    b.Property<double?>("price_amount")
                        .HasColumnType("float");

                    b.Property<double?>("refund_amount")
                        .HasColumnType("float");

                    b.Property<string>("rent_sign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<double>("unit_price")
                        .HasColumnType("float");

                    b.Property<int>("units_count")
                        .HasColumnType("int");

                    b.Property<double>("vat_amount")
                        .HasColumnType("float");

                    b.HasKey("rentId");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("carID");

                    b.HasIndex("contract_type_id");

                    b.HasIndex("cust_id");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("WebApplication1.Models.UsersPermissions", b =>
                {
                    b.Property<int>("per_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("per_id"));

                    b.Property<string>("per_func")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("per_module")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("per_id");

                    b.ToTable("UsersPermissions");
                });

            modelBuilder.Entity("WebApplication1.Models.Views.vwLate", b =>
                {
                    b.Property<int>("Contract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contract"));

                    b.Property<double>("CLateDays")
                        .HasColumnType("float");

                    b.Property<double>("Due")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LateDays")
                        .HasColumnType("int");

                    b.Property<double>("LateDue")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<double>("TotalDue")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Contract");

                    b.ToTable("vw_Late");
                });

            modelBuilder.Entity("WebApplication1.Models.Views.vwPayments", b =>
                {
                    b.Property<int>("Contract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contract"));

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Contract");

                    b.ToTable("vwPayments");
                });

            modelBuilder.Entity("WebApplication1.Models.Views.vwRent", b =>
                {
                    b.Property<int>("Contract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Contract"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Paid")
                        .HasColumnType("float");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Contract");

                    b.ToTable("vwRents");
                });

            modelBuilder.Entity("WebApplication1.Models.Views.vw_CarStatus", b =>
                {
                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CarsCount")
                        .HasColumnType("int");

                    b.HasKey("Status");

                    b.ToTable("vw_CarStatuses");
                });

            modelBuilder.Entity("WebApplication1.Models.Views.vw_DateAmount", b =>
                {
                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.HasKey("Date");

                    b.ToTable("vw_DateAmounts");
                });

            modelBuilder.Entity("WebApplication1.Models.Views.vw_payments_total", b =>
                {
                    b.Property<int>("rent_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("rent_id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("pay_amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("pay_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("pay_desc_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pay_type_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pay_value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("rent_id");

                    b.ToTable("vw_Payments_Totals");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.AuthorizationTb", b =>
                {
                    b.HasOne("WebApplication1.Models.AuthorizationType", "AuthorizationType")
                        .WithMany()
                        .HasForeignKey("auth_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("rent_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorizationType");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("WebApplication1.Models.CarType", b =>
                {
                    b.HasOne("WebApplication1.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("carmod_id");

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("WebApplication1.Models.Carr", b =>
                {
                    b.HasOne("WebApplication1.Models.CarLoc", "CarLoc")
                        .WithMany()
                        .HasForeignKey("carLoc_id");

                    b.HasOne("WebApplication1.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("carmod_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.CarType", "CarType")
                        .WithMany()
                        .HasForeignKey("cartype_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Clor", "Clor")
                        .WithMany()
                        .HasForeignKey("clor_id");

                    b.HasOne("WebApplication1.Models.FuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("fueltype_id");

                    b.HasOne("WebApplication1.Models.CarStatus", "CarStatus")
                        .WithMany()
                        .HasForeignKey("status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarLoc");

                    b.Navigation("CarModel");

                    b.Navigation("CarStatus");

                    b.Navigation("CarType");

                    b.Navigation("Clor");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("WebApplication1.Models.Customerr", b =>
                {
                    b.HasOne("WebApplication1.Models.CustomerStatus", "CustomerStatus")
                        .WithMany()
                        .HasForeignKey("cust_st_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("nat_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerStatus");

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("WebApplication1.Models.Employee", b =>
                {
                    b.HasOne("WebApplication1.Models.Project", "Project")
                        .WithMany("Employees")
                        .HasForeignKey("Projectproj_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebApplication1.Models.Invoice", b =>
                {
                    b.HasOne("WebApplication1.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("cust_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("rent_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("WebApplication1.Models.Kmcounter", b =>
                {
                    b.HasOne("WebApplication1.Models.Carr", "Carr")
                        .WithMany()
                        .HasForeignKey("car_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carr");
                });

            modelBuilder.Entity("WebApplication1.Models.Oil", b =>
                {
                    b.HasOne("WebApplication1.Models.Carr", "Carr")
                        .WithMany()
                        .HasForeignKey("car_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carr");
                });

            modelBuilder.Entity("WebApplication1.Models.Payment", b =>
                {
                    b.HasOne("WebApplication1.Models.PaymentDescription", "PaymentDescription")
                        .WithMany()
                        .HasForeignKey("pay_desc_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.PaymentOptions", "PaymentOptions")
                        .WithMany()
                        .HasForeignKey("pay_method_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Payment_Type", "Payment_Type")
                        .WithMany()
                        .HasForeignKey("pay_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("rent_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentDescription");

                    b.Navigation("PaymentOptions");

                    b.Navigation("Payment_Type");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("WebApplication1.Models.Rent", b =>
                {
                    b.HasOne("WebApplication1.Models.ContractStatus", "ContractStatus")
                        .WithMany()
                        .HasForeignKey("ContractStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Carr", "Carr")
                        .WithMany("Rents")
                        .HasForeignKey("carID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("contract_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.Customerr", "Customerr")
                        .WithMany()
                        .HasForeignKey("cust_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carr");

                    b.Navigation("ContractStatus");

                    b.Navigation("ContractType");

                    b.Navigation("Customerr");
                });

            modelBuilder.Entity("WebApplication1.Models.Carr", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("WebApplication1.Models.Project", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
